trigger:
- development
- production

pool:
  name: LinuxAgentPool
  demands:
   - Java -equals 11
   - Terraform -equals Yes

variables:
  global_version: '1.0.0'
  global_email: 'chukkavijay27@gmail.com'
  azure_dev_sub: '3c16a2dc-c202-4c66-814b-a917fa2df142'

stages:
 - stage: SASTWithSonarQube
   pool:
    name: LinuxAgentPool
    demands:
     - Java -equals 11
   variables:
     stage_version: '2.0.0'
     stage_email: 'chukkavijay@gmail.com'
   jobs:
   - job: RunningSAST
     variables:
       job_version: '3.0.0'
       job_email: 'chukkavijay27@gmail.com'
     timeoutInMinutes: 5
     steps:
       - task: SonarQubePrepare@5
         inputs:
           SonarQube: 'devops-sonarqube-token'
           scannerMode: 'Other'
           projectKey: 'sqp_c550cb2e2133c06aecb9b20de38f8be78cb14412'
           projectName: 'ado-spring-boot-app'
           projectVersion: '$(Build.BuildId)'
         displayName: "Preparing SonarQube Config"
       - task: Maven@4
         inputs:
           mavenPomFile: 'pom.xml'
           publishJUnitResults: false
           javaHomeOption: 'JDKVersion'
           mavenVersionOption: 'Default'
           mavenAuthenticateFeed: false
           effectivePomSkip: false
           sonarQubeRunAnalysis: true
           sqMavenPluginVersionChoice: 'latest'
         displayName: "Running SonarQube Maven Analysis"
       - task: sonar-buildbreaker@8
         inputs:
          SonarQube: 'devops-sonarqube-token'
         displayName: "SAST Fail or Pass"

 - stage: BuildingJavaCodeWithMaven
   pool:
    name: LinuxAgentPool
    demands:
     - Java -equals 11
   variables:
     stage_version: '2.0.0'
     stage_email: 'chukkavijay@gmail.com'
   jobs:
   - job: RunningSAST
     variables:
       job_version: '3.0.0'
       job_email: 'chukkavijay27@gmail.com'
     timeoutInMinutes: 5
     steps:
       - script: echo $(Build.BuildId)
         displayName: 'Display The Build-ID'

       - script: ls -al && pwd
         displayName: 'List Files & Current Working Directory'

       - script: mvn clean package install && ls -al
         displayName: 'Run the maven build'

       - script: ls -al && cp /home/adminchukka/myagent/_work/1/s/target/spring-petclinic-2.7.3.jar ROOT$(Build.BuildId).jar && ls -al
         displayName: 'List Files & Rename ROOT.jar'   

       - script: rm -rf /artifacts/*.jar && cp ROOT$(Build.BuildId).jar /artifacts && ls -al /artifacts
         displayName: 'Copy Artifact To Folder'

       - bash: |
          echo $(global_version) && echo $(stage_version) && echo $(job_version)
          echo $(global_email) && echo $(stage_email) && echo $(job_email)
         displayName: 'Check Variables'

       - task: CopyFiles@2
         inputs:
           Contents: 'ROOT$(Build.BuildId).jar'
           TargetFolder: '$(Build.ArtifactStagingDirectory)'
           OverWrite: true
         displayName: 'Copying JAR file to ArtifactStagingDirector'
       - task: PublishBuildArtifacts@1
         inputs:
           PathtoPublish: '$(Build.ArtifactStagingDirectory)'
           ArtifactName: 'ROOT$(Build.BuildId).jar'
           publishLocation: 'Container'
         displayName: 'Publishing JAR Artifact.'

 - stage: CopyingArtifactsToAzureAndAws
   jobs:
   - job: CopyFilesToAzureBlob
     timeoutInMinutes: 5
     steps:
     - checkout: none         
     - task: AzureCLI@2
       inputs:
         azureSubscription: 'devops-azure-connection'
         scriptType: 'bash'
         scriptLocation: 'inlineScript'
         inlineScript: |
           az storage blob upload-batch --account-name devopsadoartifacts  --account-key $(STORAGE_ACCOUNT_KEY) --destination artifacts --source /artifacts/
       displayName: 'Azure Upload artifacts to Azure Blob'
       continueOnError: true
   - job: CopyFilesToAWSS3Bucket
     dependsOn: CopyFilesToAzureBlob
     condition: always() # succeededOrFailed() or always() or failed() or succeeded()-default
     timeoutInMinutes: 5
     steps:
     - checkout: none                
     - task: S3Upload@1
       inputs:
         awsCredentials: 'devops-aws-connection'
         regionName: 'us-east-1'
         bucketName: 'devopsbcaterraformstate'
         sourceFolder: '/artifacts/'
         globExpressions: 'ROOT$(Build.BuildId).jar'
       displayName: 'AWS Upload artifacts to AWS S3 Bucket'
       continueOnError: true
 - stage: BuildDockerImagePushToDockerHubAndAzureACR
   jobs:
   - job: BuildImageAndPushToDockerHub
     timeoutInMinutes: 5
     steps:
     - checkout: none
     - task: Docker@2
       inputs:
         containerRegistry: 'devops-dockerhub-connection'
         repository: 'chukkavijay/devopsadotesting'
         command: 'buildAndPush'
         Dockerfile: '**/Dockerfile'
       displayName: 'Creating & Pushing Docker Image To Docker Registry HUB'
       continueOnError: true
   - job: BuildIMageAndPushToAzureACR
     dependsOn: BuildIMageAndPushToDockerHub
     condition: always() # succeededOrFailed() or always() or failed()
     timeoutInMinutes: 5
     steps:
     - checkout: none
     - task: Bash@3
       inputs:
         targetType: 'inline'
         script: |
           docker login -u devopsbcaacr -p $(acrpassword) devopsbcaacr.azurecr.io
           docker tag chukkavijay/devopsbcaadotesting:$(Build.BuildId) devopsbcaacr.azurecr.io/devopsbcaacr:$(Build.BuildId)
           docker push devopsbcaacr.azurecr.io/devopsbcaacr:$(Build.BuildId)
       displayName: 'Creating & Pushing Docker Image To Azure ACR'

 - stage: DeployDockerImageToAzureACI
   pool:
    name: LinuxAgentPool 
    demands:
     - Java -equals 11
   jobs:
    - job: DeployAzureACI
      timeoutInMinutes: 10
      steps:
      - checkout: none
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'devopsbca-azure-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az container create -g devopsbcaADO --name devopsbcaaci$(Build.BuildId) --image devopsbcaacr.azurecr.io/devopsbcaacr:$(Build.BuildId) --cpu 2 --memory 4 --ports 8080 --dns-name-label devopsbcaaci$(Build.BuildId) --registry-username devopsbcaacr --registry-password $(acrpassword) --location eastus'
          #inlineScript: az group list
        displayName: 'Deploy Docker Image to Azure Container Instances'
        continueOnError: true
 - stage: 'DeployingToStagingEnvironment'
   pool: LinuxAgentPool
   displayName: 'Deploying To AWS Staging Environment'    
   jobs:
    - deployment: "DeployJARtoStagingServer"
      environment: 
        name: STAGING
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy :
            steps:
             - script: PROC=$(ps -ef | grep -i jar | grep -v grep | awk {'print$2'}) && echo $PROC && sudo kill -9 $PROC
               displayName: 'Stop Existing JAR File'
               continueOnError: true 
             - script: sudo java -jar /home/ubuntu/azagent/_work/1/ROOT$(Build.BuildId).jar/ROOT$(Build.BuildId).jar &
               displayName: 'Running The Jar File'
               continueOnError: true 
     
 - stage: ValidatingStagingDeploy
   pool:
    name: LinuxAgentPool
    demands:
     - Java -equals 11
   jobs:
   - job: CheckingStagingDeployment
     variables:
       port_number: 200
     timeoutInMinutes: 10
     steps:
       - checkout: none
       - script: |
           RESPONSE=$(curl -o /dev/null -s -w "%{http_code}\n" http://ec2-35-175-115-135.compute-1.amazonaws.com:8080/)
           if [ ${RESPONSE} -eq $(port_number) ]
           then
           echo "The RESPONSE IS $RESPONSE"
           echo "DEPLOYMENT TO STAGING IS SUCESSFULL. PROCEED TO PRODUCTION."
           else
           echo "The RESPONSE IS $RESPONSE"
           echo "DEPLOYMENT FAILED IN STAGING"
           exit 1
           fi
         displayName: 'Testing Tomcat Deployment'

 - stage: 'DeployingToProdEnvironment'
   pool: LinuxAgentPool
   displayName: 'Deploying To AWS Prod Environment'    
   jobs:
    - deployment: "DeployJARtoProdServer"
      environment: 
        name: PROD
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy :
            steps:
             - script: PROC=$(ps -ef | grep -i jar | grep -v grep | awk {'print$2'}) && echo $PROC && sudo kill -9 $PROC
               displayName: 'Stop Existing JAR File'
               continueOnError: true 
             - script: sudo java -jar /home/ubuntu/azagent/_work/1/ROOT$(Build.BuildId).jar/ROOT$(Build.BuildId).jar &
               displayName: 'Running The Jar File'
               continueOnError: true
      
 - stage: ValidatingProdDeploy
   pool:
    name: LinuxAgentPool
    demands:
     - Java -equals 11
   jobs:
   - job: CheckingProductionDeployment
     variables:
       port_number: 200
     timeoutInMinutes: 10
     steps:
       - checkout: none
       - script: |
           RESPONSE=$(curl -o /dev/null -s -w "%{http_code}\n" http://ec2-3-209-11-200.compute-1.amazonaws.com:8080/)
           if [ ${RESPONSE} -eq $(port_number) ]
           then
           echo "The RESPONSE IS $RESPONSE"
           echo "DEPLOYMENT TO PRODUCTION IS SUCESSFULL."
           else
           echo "The RESPONSE IS $RESPONSE"
           echo "DEPLOYMENT FAILED IN PRODUCTION"
           exit 1
           fi
         displayName: 'Testing Tomcat Deployment'